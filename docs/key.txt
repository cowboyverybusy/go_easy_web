【sql记录包含null怎么办】
One thing that Go doesn’t do very well is managing NULL values in database records.
go在管理数据库记录中的NULL值时做的不好。go语言中需要提前定义好查询字段的类型，但是连表查询的时候，
可能有些字段的值为null。那么就会报错提示类型不一致。
解决这个问题的三个方案：
1、用sql.NullString代表string
2、避免出现null值，即过滤掉null的记录：where name IS NOT NULL
3、不允许过滤字段为null的这些数据，可以用CASE WHEN把null转换为空字符串：
SELECT id,(CASE WHEN name IS NULL THEN "" ELSE name END) as etcd_value from table

【模板技巧一：模板中可以调用结构体的方法】
type User struct {
	UserId   int
	UserName string
	UserDesc string
}

func (u *User) GetUserAge() int {
	return 10 * u.UserId
}

<h2>my name is {{.UserName}}</h2>
<!-- 模板可以调用结构体的方法 -->
<p>my age is :{{.GetUserAge}}</p>

【模板技巧二：存储函数的结果并在模板中的多个地方使用它】
<!-- 把函数结果存储在以$符号开头的变量，这样能在多个地方直接使用 -->
{{$age := .GetUserAge}}
<p>you age is {{$age}}</p>

【模板技巧三：避免模板解析报错的时候，返回一半的html给用户】
原有的代码：
err = ts.Execute(w, user)
改进思路：
将模板渲染分为两个阶段。首先，我们应该通过将模板写入缓冲区来进行“试验”渲染。
如果失败，我们可以用一条错误消息响应用户。但如果它能工作（解析成功），我们就可以将缓冲区的内容写入http.ResponseWriter。
代码如下：
buf := new(bytes.Buffer)
err = ts.Execute(buf, user)
if err != nil {
	app.serverError(w, err)
	return
}
buf.WriteTo(w)